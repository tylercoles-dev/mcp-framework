# Production environment with PostgreSQL
version: '3.8'

services:
  kanban-board:
    build:
      context: .
      target: production
    container_name: kanban-board-prod
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - HOST=0.0.0.0
      - DB_TYPE=postgres
      - DATABASE_URL=postgresql://kanban_user:kanban_pass@postgres:5432/kanban_db
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=kanban_user
      - DB_PASSWORD=kanban_pass
      - DB_NAME=kanban_db
    volumes:
      # Persistent logs
      - kanban_logs:/app/logs
      # Configuration
      - ./config:/app/config:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - kanban-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: kanban-postgres
    environment:
      - POSTGRES_DB=kanban_db
      - POSTGRES_USER=kanban_user
      - POSTGRES_PASSWORD=kanban_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      # Persistent database storage
      - postgres_data:/var/lib/postgresql/data
      # Custom PostgreSQL configuration
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      # Initialization scripts
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"  # Expose for external access (optional)
    networks:
      - kanban-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kanban_user -d kanban_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Optional: Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: kanban-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    networks:
      - kanban-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: kanban-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - kanban-board
    networks:
      - kanban-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kanban_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  kanban-network:
    driver: bridge