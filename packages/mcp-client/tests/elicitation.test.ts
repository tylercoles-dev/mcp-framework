import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
import {\n  BaseMCPClient,\n  ElicitationAction,\n  type ElicitationRequest,\n  type ElicitationResponse,\n  type ElicitationField,\n  type ElicitationHandler,\n  type ElicitationValidationError,\n  type ClientConfig\n} from '../src/index.js';\nimport { CallToolResult, JSONRPCMessage, JSONRPCResponse } from '@modelcontextprotocol/sdk/types';\n\n// Mock implementation of BaseMCPClient for testing elicitation\nclass MockElicitationClient extends BaseMCPClient {\n  private mockSDKClient = {\n    connect: vi.fn(),\n    disconnect: vi.fn(),\n    listTools: vi.fn(),\n    callTool: vi.fn(),\n    listResources: vi.fn(),\n    readResource: vi.fn(),\n    listPrompts: vi.fn(),\n    getPrompt: vi.fn()\n  };\n\n  async connect(): Promise<void> {\n    this.setConnectionState('connecting' as any);\n    await this.mockSDKClient.connect();\n    this.setConnectionState('connected' as any);\n  }\n\n  async disconnect(): Promise<void> {\n    this.setConnectionState('disconnecting' as any);\n    await this.mockSDKClient.disconnect();\n    this.setConnectionState('disconnected' as any);\n  }\n\n  async listTools() {\n    this.ensureConnected();\n    return this.mockSDKClient.listTools();\n  }\n\n  async listResources() {\n    this.ensureConnected();\n    return this.mockSDKClient.listResources();\n  }\n\n  async readResource(uri: string) {\n    this.ensureConnected();\n    return this.mockSDKClient.readResource(uri);\n  }\n\n  async listPrompts() {\n    this.ensureConnected();\n    return this.mockSDKClient.listPrompts();\n  }\n\n  async getPrompt(name: string, args?: any) {\n    this.ensureConnected();\n    return this.mockSDKClient.getPrompt(name, args);\n  }\n\n  protected async doCallTool(name: string, args?: any): Promise<CallToolResult> {\n    this.ensureConnected();\n    return this.mockSDKClient.callTool(name, args);\n  }\n\n  async sendMessage(message: JSONRPCMessage): Promise<JSONRPCResponse | void> {\n    this.ensureConnected();\n    \n    if ('id' in message && message.id !== undefined) {\n      return {\n        jsonrpc: '2.0',\n        id: message.id,\n        result: { mock: 'response' }\n      };\n    }\n  }\n\n  protected async sendHeartbeat(): Promise<void> {\n    // Mock heartbeat implementation\n  }\n\n  getSDKClient() {\n    return this.mockSDKClient;\n  }\n\n  // Expose protected methods for testing\n  public setConnectionStatePublic(state: any) {\n    this.setConnectionState(state);\n  }\n\n  public handleElicitationNotificationPublic(notification: any) {\n    return this.handleElicitationNotification(notification);\n  }\n}\n\ndescribe('MCP Elicitation System', () => {\n  let client: MockElicitationClient;\n  let config: ClientConfig;\n\n  beforeEach(() => {\n    config = {\n      timeout: 5000,\n      autoReconnect: false\n    };\n    client = new MockElicitationClient(config);\n  });\n\n  afterEach(async () => {\n    await client.disconnect();\n    vi.clearAllMocks();\n  });\n\n  describe('Elicitation Handler Registration', () => {\n    it('should register and unregister elicitation handlers', () => {\n      const handler: ElicitationHandler = vi.fn().mockResolvedValue({\n        id: 'test-request',\n        action: ElicitationAction.Accept,\n        values: { name: 'Test User' }\n      });\n\n      const unregister = client.registerElicitationHandler(handler);\n      \n      expect(typeof unregister).toBe('function');\n      \n      // Unregister the handler\n      unregister();\n      \n      expect(() => unregister()).not.toThrow(); // Should be safe to call multiple times\n    });\n\n    it('should support multiple elicitation handlers', () => {\n      const handler1: ElicitationHandler = vi.fn();\n      const handler2: ElicitationHandler = vi.fn();\n      \n      const unregister1 = client.registerElicitationHandler(handler1);\n      const unregister2 = client.registerElicitationHandler(handler2);\n      \n      expect(typeof unregister1).toBe('function');\n      expect(typeof unregister2).toBe('function');\n      \n      // Unregister handlers\n      unregister1();\n      unregister2();\n    });\n  });\n\n  describe('Elicitation Request Handling', () => {\n    let testRequest: ElicitationRequest;\n    let mockHandler: ElicitationHandler;\n\n    beforeEach(() => {\n      testRequest = {\n        id: 'test-elicitation-1',\n        title: 'User Information',\n        description: 'Please provide your information',\n        fields: [\n          {\n            name: 'name',\n            type: 'text',\n            label: 'Full Name',\n            required: true\n          },\n          {\n            name: 'email',\n            type: 'email',\n            label: 'Email Address',\n            required: true\n          },\n          {\n            name: 'age',\n            type: 'number',\n            label: 'Age',\n            validation: { min: 18, max: 120 }\n          }\n        ],\n        allowCancel: true\n      };\n\n      mockHandler = vi.fn().mockResolvedValue({\n        id: testRequest.id,\n        action: ElicitationAction.Accept,\n        values: {\n          name: 'John Doe',\n          email: 'john@example.com',\n          age: 30\n        }\n      });\n\n      client.registerElicitationHandler(mockHandler);\n    });\n\n    it('should handle basic elicitation request', async () => {\n      const response = await client.handleElicitationRequest(testRequest);\n\n      expect(response).toEqual({\n        id: testRequest.id,\n        action: ElicitationAction.Accept,\n        values: {\n          name: 'John Doe',\n          email: 'john@example.com',\n          age: 30\n        }\n      });\n\n      expect(mockHandler).toHaveBeenCalledWith(testRequest);\n    });\n\n    it('should handle decline response', async () => {\n      const declineHandler: ElicitationHandler = vi.fn().mockResolvedValue({\n        id: testRequest.id,\n        action: ElicitationAction.Decline,\n        reason: 'Information too sensitive'\n      });\n\n      client.registerElicitationHandler(declineHandler);\n\n      const response = await client.handleElicitationRequest(testRequest);\n\n      expect(response.action).toBe(ElicitationAction.Decline);\n      expect(response.reason).toBe('Information too sensitive');\n    });\n\n    it('should handle cancel response', async () => {\n      const cancelHandler: ElicitationHandler = vi.fn().mockResolvedValue({\n        id: testRequest.id,\n        action: ElicitationAction.Cancel,\n        reason: 'User cancelled'\n      });\n\n      client.registerElicitationHandler(cancelHandler);\n\n      const response = await client.handleElicitationRequest(testRequest);\n\n      expect(response.action).toBe(ElicitationAction.Cancel);\n      expect(response.reason).toBe('User cancelled');\n    });\n\n    it('should track active elicitation requests', async () => {\n      expect(client.getActiveElicitationRequests()).toHaveLength(0);\n\n      // Start handling request but don't await yet\n      const responsePromise = client.handleElicitationRequest(testRequest);\n      \n      // Should be active during handling\n      expect(client.getActiveElicitationRequests()).toHaveLength(1);\n      expect(client.getActiveElicitationRequests()[0].id).toBe(testRequest.id);\n\n      // Wait for completion\n      await responsePromise;\n      \n      // Should be removed after completion\n      expect(client.getActiveElicitationRequests()).toHaveLength(0);\n    });\n\n    it('should handle multiple handlers with fallback', async () => {\n      const faultyHandler: ElicitationHandler = vi.fn().mockRejectedValue(\n        new Error('Handler failed')\n      );\n      \n      const workingHandler: ElicitationHandler = vi.fn().mockResolvedValue({\n        id: testRequest.id,\n        action: ElicitationAction.Accept,\n        values: { name: 'Fallback User' }\n      });\n\n      // Register faulty handler first\n      client.registerElicitationHandler(faultyHandler);\n      client.registerElicitationHandler(workingHandler);\n\n      const response = await client.handleElicitationRequest(testRequest);\n\n      expect(response.action).toBe(ElicitationAction.Accept);\n      expect(response.values?.name).toBe('Fallback User');\n      expect(faultyHandler).toHaveBeenCalled();\n      expect(workingHandler).toHaveBeenCalled();\n    });\n\n    it('should return cancel when no handlers succeed', async () => {\n      const faultyHandler: ElicitationHandler = vi.fn().mockRejectedValue(\n        new Error('Handler failed')\n      );\n\n      client.registerElicitationHandler(faultyHandler);\n\n      const response = await client.handleElicitationRequest(testRequest);\n\n      expect(response.action).toBe(ElicitationAction.Cancel);\n      expect(response.reason).toBe('No elicitation handler available');\n    });\n  });\n\n  describe('Elicitation Validation', () => {\n    let testFields: ElicitationField[];\n\n    beforeEach(() => {\n      testFields = [\n        {\n          name: 'name',\n          type: 'text',\n          label: 'Full Name',\n          required: true,\n          validation: { minLength: 2, maxLength: 100 }\n        },\n        {\n          name: 'email',\n          type: 'email',\n          label: 'Email Address',\n          required: true\n        },\n        {\n          name: 'age',\n          type: 'number',\n          label: 'Age',\n          validation: { min: 18, max: 120 }\n        },\n        {\n          name: 'website',\n          type: 'url',\n          label: 'Website',\n          required: false\n        },\n        {\n          name: 'subscribe',\n          type: 'boolean',\n          label: 'Subscribe to newsletter',\n          required: false\n        },\n        {\n          name: 'country',\n          type: 'select',\n          label: 'Country',\n          required: true,\n          validation: {\n            options: [\n              { value: 'us', label: 'United States' },\n              { value: 'ca', label: 'Canada' },\n              { value: 'uk', label: 'United Kingdom' }\n            ]\n          }\n        }\n      ];\n    });\n\n    it('should validate required fields', () => {\n      const values = {\n        email: 'test@example.com',\n        age: 25\n        // Missing required 'name' and 'country'\n      };\n\n      const errors = client.validateElicitationValues(testFields, values);\n      \n      expect(errors).toHaveLength(2);\n      expect(errors.find(e => e.field === 'name')).toEqual({\n        field: 'name',\n        message: 'Full Name is required',\n        code: 'REQUIRED'\n      });\n      expect(errors.find(e => e.field === 'country')).toEqual({\n        field: 'country',\n        message: 'Country is required',\n        code: 'REQUIRED'\n      });\n    });\n\n    it('should validate number types and ranges', () => {\n      const values = {\n        name: 'John Doe',\n        email: 'john@example.com',\n        age: 150, // Exceeds max\n        country: 'us'\n      };\n\n      const errors = client.validateElicitationValues(testFields, values);\n      \n      expect(errors).toHaveLength(1);\n      expect(errors[0]).toEqual({\n        field: 'age',\n        message: 'Age must be at most 120',\n        code: 'MAX_VALUE'\n      });\n    });\n\n    it('should validate email format', () => {\n      const values = {\n        name: 'John Doe',\n        email: 'invalid-email',\n        country: 'us'\n      };\n\n      const errors = client.validateElicitationValues(testFields, values);\n      \n      expect(errors).toHaveLength(1);\n      expect(errors[0]).toEqual({\n        field: 'email',\n        message: 'Email Address must be a valid email address',\n        code: 'INVALID_EMAIL'\n      });\n    });\n\n    it('should validate URL format', () => {\n      const values = {\n        name: 'John Doe',\n        email: 'john@example.com',\n        website: 'not-a-url',\n        country: 'us'\n      };\n\n      const errors = client.validateElicitationValues(testFields, values);\n      \n      expect(errors).toHaveLength(1);\n      expect(errors[0]).toEqual({\n        field: 'website',\n        message: 'Website must be a valid URL',\n        code: 'INVALID_URL'\n      });\n    });\n\n    it('should validate boolean types', () => {\n      const booleanField: ElicitationField = {\n        name: 'terms',\n        type: 'boolean',\n        label: 'Accept Terms',\n        required: true\n      };\n\n      const values = {\n        terms: 'yes' // Should be boolean\n      };\n\n      const errors = client.validateElicitationValues([booleanField], values);\n      \n      expect(errors).toHaveLength(1);\n      expect(errors[0]).toEqual({\n        field: 'terms',\n        message: 'Accept Terms must be true or false',\n        code: 'INVALID_TYPE'\n      });\n    });\n\n    it('should validate select options', () => {\n      const values = {\n        name: 'John Doe',\n        email: 'john@example.com',\n        country: 'invalid-country'\n      };\n\n      const errors = client.validateElicitationValues(testFields, values);\n      \n      expect(errors).toHaveLength(1);\n      expect(errors[0]).toEqual({\n        field: 'country',\n        message: 'Country must be one of the provided options',\n        code: 'INVALID_OPTION'\n      });\n    });\n\n    it('should validate multiselect options', () => {\n      const multiselectField: ElicitationField = {\n        name: 'interests',\n        type: 'multiselect',\n        label: 'Interests',\n        validation: {\n          options: [\n            { value: 'tech', label: 'Technology' },\n            { value: 'sports', label: 'Sports' },\n            { value: 'music', label: 'Music' }\n          ]\n        }\n      };\n\n      const values = {\n        interests: ['tech', 'invalid-interest']\n      };\n\n      const errors = client.validateElicitationValues([multiselectField], values);\n      \n      expect(errors).toHaveLength(1);\n      expect(errors[0]).toEqual({\n        field: 'interests',\n        message: 'Interests must contain only valid options',\n        code: 'INVALID_OPTIONS'\n      });\n    });\n\n    it('should validate string length constraints', () => {\n      const values = {\n        name: 'J', // Too short\n        email: 'john@example.com',\n        country: 'us'\n      };\n\n      const errors = client.validateElicitationValues(testFields, values);\n      \n      expect(errors).toHaveLength(1);\n      expect(errors[0]).toEqual({\n        field: 'name',\n        message: 'Full Name must be at least 2 characters',\n        code: 'MIN_LENGTH'\n      });\n    });\n\n    it('should validate field dependencies', () => {\n      const dependentField: ElicitationField = {\n        name: 'other_specify',\n        type: 'text',\n        label: 'Please specify',\n        dependencies: [\n          { field: 'country', value: 'other' }\n        ]\n      };\n\n      const fieldsWithDependency = [...testFields, dependentField];\n      \n      const values = {\n        name: 'John Doe',\n        email: 'john@example.com',\n        country: 'us',\n        other_specify: 'Some value' // Should not be provided when country is not 'other'\n      };\n\n      const errors = client.validateElicitationValues(fieldsWithDependency, values);\n      \n      expect(errors).toHaveLength(1);\n      expect(errors[0]).toEqual({\n        field: 'other_specify',\n        message: 'Please specify is only valid when country is other',\n        code: 'DEPENDENCY_NOT_MET'\n      });\n    });\n\n    it('should skip validation for empty optional fields', () => {\n      const values = {\n        name: 'John Doe',\n        email: 'john@example.com',\n        country: 'us'\n        // age, website, subscribe are optional and not provided\n      };\n\n      const errors = client.validateElicitationValues(testFields, values);\n      \n      expect(errors).toHaveLength(0);\n    });\n  });\n\n  describe('Request Format Validation', () => {\n    it('should validate elicitation request format', async () => {\n      const invalidRequest = {\n        // Missing required fields\n        title: 'Test'\n      } as any;\n\n      await expect(client.handleElicitationRequest(invalidRequest)).rejects.toThrow(\n        'Invalid elicitation request format'\n      );\n    });\n\n    it('should validate response with accept action has values', async () => {\n      const testRequest: ElicitationRequest = {\n        id: 'test',\n        title: 'Test',\n        fields: [\n          {\n            name: 'name',\n            type: 'text',\n            label: 'Name',\n            required: true\n          }\n        ]\n      };\n\n      const invalidHandler: ElicitationHandler = vi.fn().mockResolvedValue({\n        id: 'test',\n        action: ElicitationAction.Accept,\n        values: {\n          name: '' // Empty required field\n        }\n      });\n\n      client.registerElicitationHandler(invalidHandler);\n\n      const response = await client.handleElicitationRequest(testRequest);\n      \n      // Should fall back to cancel if validation fails\n      expect(response.action).toBe(ElicitationAction.Cancel);\n    });\n  });\n\n  describe('Notification Handling', () => {\n    beforeEach(async () => {\n      await client.connect();\n    });\n\n    it('should handle elicitation request notifications', async () => {\n      const sendMessageSpy = vi.spyOn(client, 'sendMessage').mockResolvedValue();\n      \n      const testRequest: ElicitationRequest = {\n        id: 'notification-test',\n        title: 'Test Notification',\n        fields: [\n          {\n            name: 'response',\n            type: 'text',\n            label: 'Response',\n            required: true\n          }\n        ]\n      };\n\n      const mockHandler: ElicitationHandler = vi.fn().mockResolvedValue({\n        id: 'notification-test',\n        action: ElicitationAction.Accept,\n        values: { response: 'Test response' }\n      });\n\n      client.registerElicitationHandler(mockHandler);\n\n      const notification = {\n        jsonrpc: '2.0',\n        method: 'notifications/elicitation/request',\n        params: testRequest\n      };\n\n      await client.handleElicitationNotificationPublic(notification);\n\n      expect(mockHandler).toHaveBeenCalledWith(testRequest);\n      expect(sendMessageSpy).toHaveBeenCalledWith({\n        jsonrpc: '2.0',\n        method: 'elicitation/response',\n        params: {\n          id: 'notification-test',\n          action: ElicitationAction.Accept,\n          values: { response: 'Test response' }\n        }\n      });\n    });\n\n    it('should handle elicitation errors in notifications', async () => {\n      const sendMessageSpy = vi.spyOn(client, 'sendMessage').mockResolvedValue();\n      \n      const testRequest: ElicitationRequest = {\n        id: 'error-test',\n        title: 'Error Test',\n        fields: []\n      };\n\n      // No handler registered - should result in error\n\n      const notification = {\n        jsonrpc: '2.0',\n        method: 'notifications/elicitation/request',\n        params: testRequest\n      };\n\n      await client.handleElicitationNotificationPublic(notification);\n\n      expect(sendMessageSpy).toHaveBeenCalledWith({\n        jsonrpc: '2.0',\n        method: 'elicitation/response',\n        params: {\n          id: 'error-test',\n          action: ElicitationAction.Cancel,\n          reason: 'No elicitation handler available'\n        }\n      });\n    });\n  });\n});